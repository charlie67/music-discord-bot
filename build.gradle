plugins {
    id 'java'
    id 'org.springframework.boot' version '2.2.0.RELEASE'
}

version '0.1'

sourceCompatibility = 1.8

apply plugin: 'application'
mainClassName = "bot.ApplicationBootstrap"

repositories {
    mavenCentral()
    jcenter()
}

import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

tasks.withType(Test) {
    testLogging {
        events TestLogEvent.FAILED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_ERROR,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showCauses true
        showExceptions true
        showStackTraces true
        showStandardStreams true
    }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'

    // https://mvnrepository.com/artifact/org.mockito/mockito-core
    testCompile group: 'org.mockito', name: 'mockito-core', version: '3.0.0'
    compile 'org.awaitility:awaitility:4.0.1'

    compile 'net.dv8tion:JDA:+'
    compile 'com.sedmelluq:lavaplayer:1.3.49'
    compile 'com.jagrosh:jda-utilities:+'

    //youtube
    compile 'com.google.api-client:google-api-client:1.23.0'
    compile 'com.google.oauth-client:google-oauth-client-jetty:1.23.0'
    compile 'com.google.apis:google-api-services-youtube:v3-rev212-1.25.0'

    //reddit
    compile 'net.dean.jraw:JRAW:1.1.0'

    //springboot

    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.2.0.RELEASE'

    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-tomcat
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-tomcat', version: '2.2.0.RELEASE'

    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-actuator
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: '2.2.0.RELEASE'
}

jar {
    manifest {
        attributes(
                'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
                'Main-Class': mainClassName
        )
    }
}